plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.14.0'
	id 'com.diffplug.spotless' version '7.2.1'
}

group = 'com.cekinmezyucel'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.35'
	implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.postgresql:postgresql:42.7.7'

	runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.13.0'

	testImplementation platform('org.testcontainers:testcontainers-bom:1.21.3')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('openApiGenerate') {
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/openapi.yaml"
	outputDir = "$buildDir/generated/openapi"
	apiPackage = "com.cekinmezyucel.springboot.poc.api"
	modelPackage = "com.cekinmezyucel.springboot.poc.model"
	invokerPackage = "com.cekinmezyucel.springboot.poc.invoker"
	configOptions = [interfaceOnly: "true", useJakartaEe: "true"]
}

tasks.named('compileJava') {
	dependsOn tasks.named('openApiGenerate')
	dependsOn tasks.named('spotlessApply')
}

sourceSets {
	main {
		java {
			srcDir "$buildDir/generated/openapi/src/main/java"
		}
	}
}

spotless {
	java {
		target 'src/**/*.java'
		googleJavaFormat()
		removeUnusedImports()
		importOrderFile('import-order.txt')
	}
}
